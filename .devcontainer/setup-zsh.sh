#!/bin/bash

# Exit on any error
set -e

# Install Oh My Zsh if not already installed
if [ ! -d "$HOME/.oh-my-zsh" ]; then
    echo "Installing Oh My Zsh..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
else
    echo "Oh My Zsh is already installed."
fi

# Install Powerlevel10k theme
if [ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k" ]; then
    echo "Installing Powerlevel10k theme..."
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
fi

# Install useful plugins
if [ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions" ]; then
    echo "Installing zsh-autosuggestions..."
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
fi

if [ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting" ]; then
    echo "Installing zsh-syntax-highlighting..."
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
fi

# Create/update .zshrc with developer-friendly configuration
cat > $HOME/.zshrc << 'EOL'
# Enable Powerlevel10k instant prompt
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to Oh My Zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Set theme to Powerlevel10k
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set helpful plugins
plugins=(
  git
  docker
  dotnet
  vscode
  kubectl
  npm
  web-search
  zsh-autosuggestions
  zsh-syntax-highlighting
  command-not-found
  history
  z
)

# Load Oh My Zsh
source $ZSH/oh-my-zsh.sh

# Add .NET Core global tools to PATH
export PATH="$PATH:$HOME/.dotnet/tools"

# Aliases for .NET development
alias dr='dotnet run'
alias dt='dotnet test'
alias db='dotnet build'
alias dw='dotnet watch'
alias dc='dotnet clean'
alias drm='dotnet restore'
alias dp='dotnet publish'
alias dta='dotnet test --no-restore --no-build --verbosity normal'
alias dtac='dotnet test --collect:"XPlat Code Coverage"'

# Git aliases
alias gs='git status'
alias gl='git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit'
alias gaa='git add --all'
alias gca='git commit --amend'

# Docker aliases
alias dps='docker ps'
alias dpsa='docker ps -a'
alias dimg='docker images'

# Directory navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# Useful functions
# Launch a quick HTTP server in current directory
function serve() {
  local port=${1:-8000}
  echo "Starting HTTP server on port $port..."
  python3 -m http.server $port
}

# Find files by name pattern
function ff() {
  find . -type f -name "*$1*" | grep -v "node_modules\|.git\|bin\|obj"
}

# Grep through files
function fgrep() {
  grep -r "$1" . --include="*.$2" --exclude-dir={node_modules,.git,bin,obj}
}

# Show dotnet core versions
function dotnetv() {
  echo "SDK versions:"
  dotnet --list-sdks
  echo ""
  echo "Runtime versions:"
  dotnet --list-runtimes
}

# Load Powerlevel10k configuration
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
EOL

# Create Powerlevel10k configuration file with dev-friendly settings
cat > $HOME/.p10k.zsh << 'EOL'
# Generated by Powerlevel10k configuration wizard
# Config for developer-friendly prompt with git status, command execution time, etc.
'builtin' 'local' '-a' 'p10k_config_opts'
[[ ! -o 'aliases'         ]] || p10k_config_opts+=('aliases')
[[ ! -o 'sh_glob'         ]] || p10k_config_opts+=('sh_glob')
[[ ! -o 'no_brace_expand' ]] || p10k_config_opts+=('no_brace_expand')
'builtin' 'setopt' 'no_aliases' 'no_sh_glob' 'brace_expand'

() {
  emulate -L zsh -o extended_glob
  unset -m '(POWERLEVEL9K_*|DEFAULT_USER)~POWERLEVEL9K_GITSTATUS_DIR'

  # Left prompt segments
#   typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
#     # Line 1
#     dir                     # current directory
#     vcs                     # git status
#     # Line 2
#     newline                 # \n
#     prompt_char             # prompt symbol
#   )

  typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
    dir                     # current directory
    vcs                     # git status
  )

  # Right prompt segments
  # typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
  #   # Line 1
  #   status                  # exit code of the last command
  #   command_execution_time  # duration of the last command
  #   background_jobs         # presence of background jobs
  #   direnv                  # direnv status
  #   asdf                    # asdf version manager
  #   virtualenv              # python virtual environment
  #   anaconda                # conda environment
  #   pyenv                   # python environment
  #   nodenv                  # node.js version from nodenv
  #   nvm                     # node.js version from nvm
  #   nodeenv                 # node.js environment
  #   dotnet_version          # .net version
  #   # Line 2
  #   newline
  #   # Empty line
  # )

  # Basic style options
  typeset -g POWERLEVEL9K_PROMPT_ON_NEWLINE=false
  typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=''
  typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX='%F{blue}❯%f '

  # Directory styling
  typeset -g POWERLEVEL9K_DIR_BACKGROUND='none'
  typeset -g POWERLEVEL9K_DIR_FOREGROUND='white'
  typeset -g POWERLEVEL9K_SHORTEN_STRATEGY=truncate_to_unique
  typeset -g POWERLEVEL9K_SHORTEN_DIR_LENGTH=3

  # VCS (Git) styling
  typeset -g POWERLEVEL9K_VCS_CLEAN_BACKGROUND='green'
  typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND='white'
  typeset -g POWERLEVEL9K_VCS_MODIFIED_BACKGROUND='blue'
  typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND='white'
  typeset -g POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND='red'
  typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND='white'

  # Command execution time
  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=3
  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND='yellow'
  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND='black'

  # Status
  typeset -g POWERLEVEL9K_STATUS_OK=false
  typeset -g POWERLEVEL9K_STATUS_ERROR_BACKGROUND='red'
  typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND='white'

  # Prompt character (used when ready to take input)
  typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_{VIINS,VICMD,VIVIS,VIOWR}_BACKGROUND='none'
  typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND='green'
  typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND='red'

  # DotNet version
  typeset -g POWERLEVEL9K_DOTNET_VERSION_BACKGROUND='blue'
  typeset -g POWERLEVEL9K_DOTNET_VERSION_FOREGROUND='black'
}

(( ${#p10k_config_opts} )) && setopt ${p10k_config_opts[@]}
'builtin' 'unset' 'p10k_config_opts'
EOL

echo "Developer-friendly ZSH prompt has been configured!"
echo "Please restart your terminal or run 'source ~/.zshrc' to apply changes."
